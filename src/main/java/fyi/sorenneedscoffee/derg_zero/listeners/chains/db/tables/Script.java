/*
 * This file is generated by jOOQ.
 */
package fyi.sorenneedscoffee.derg_zero.listeners.chains.db.tables;


import fyi.sorenneedscoffee.derg_zero.listeners.chains.db.Indexes;
import fyi.sorenneedscoffee.derg_zero.listeners.chains.db.Keys;
import fyi.sorenneedscoffee.derg_zero.listeners.chains.db.S4Starbot2;
import fyi.sorenneedscoffee.derg_zero.listeners.chains.db.tables.records.ScriptRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Script extends TableImpl<ScriptRecord> {

    private static final long serialVersionUID = -996870117;

    /**
     * The reference instance of <code>s4_starbot2.script</code>
     */
    public static final Script SCRIPT = new Script();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScriptRecord> getRecordType() {
        return ScriptRecord.class;
    }

    /**
     * The column <code>s4_starbot2.script.index</code>.
     */
    public final TableField<ScriptRecord, Integer> INDEX = createField(DSL.name("index"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>s4_starbot2.script.value</code>.
     */
    public final TableField<ScriptRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * Create a <code>s4_starbot2.script</code> table reference
     */
    public Script() {
        this(DSL.name("script"), null);
    }

    /**
     * Create an aliased <code>s4_starbot2.script</code> table reference
     */
    public Script(String alias) {
        this(DSL.name(alias), SCRIPT);
    }

    /**
     * Create an aliased <code>s4_starbot2.script</code> table reference
     */
    public Script(Name alias) {
        this(alias, SCRIPT);
    }

    private Script(Name alias, Table<ScriptRecord> aliased) {
        this(alias, aliased, null);
    }

    private Script(Name alias, Table<ScriptRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Script(Table<O> child, ForeignKey<O, ScriptRecord> key) {
        super(child, key, SCRIPT);
    }

    @Override
    public Schema getSchema() {
        return S4Starbot2.S4_STARBOT2;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SCRIPT_PRIMARY);
    }

    @Override
    public UniqueKey<ScriptRecord> getPrimaryKey() {
        return Keys.KEY_SCRIPT_PRIMARY;
    }

    @Override
    public List<UniqueKey<ScriptRecord>> getKeys() {
        return Arrays.<UniqueKey<ScriptRecord>>asList(Keys.KEY_SCRIPT_PRIMARY);
    }

    @Override
    public Script as(String alias) {
        return new Script(DSL.name(alias), this);
    }

    @Override
    public Script as(Name alias) {
        return new Script(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Script rename(String name) {
        return new Script(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Script rename(Name name) {
        return new Script(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
