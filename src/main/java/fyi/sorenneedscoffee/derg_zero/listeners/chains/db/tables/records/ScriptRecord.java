/*
 * This file is generated by jOOQ.
 */
package fyi.sorenneedscoffee.derg_zero.listeners.chains.db.tables.records;


import fyi.sorenneedscoffee.derg_zero.listeners.chains.db.tables.Script;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScriptRecord extends UpdatableRecordImpl<ScriptRecord> implements Record2<Integer, String> {

    private static final long serialVersionUID = 1258795389;

    /**
     * Setter for <code>s4_starbot2.script.index</code>.
     */
    public void setIndex(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>s4_starbot2.script.index</code>.
     */
    public Integer getIndex() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>s4_starbot2.script.value</code>.
     */
    public void setValue(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>s4_starbot2.script.value</code>.
     */
    public String getValue() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Script.SCRIPT.INDEX;
    }

    @Override
    public Field<String> field2() {
        return Script.SCRIPT.VALUE;
    }

    @Override
    public Integer component1() {
        return getIndex();
    }

    @Override
    public String component2() {
        return getValue();
    }

    @Override
    public Integer value1() {
        return getIndex();
    }

    @Override
    public String value2() {
        return getValue();
    }

    @Override
    public ScriptRecord value1(Integer value) {
        setIndex(value);
        return this;
    }

    @Override
    public ScriptRecord value2(String value) {
        setValue(value);
        return this;
    }

    @Override
    public ScriptRecord values(Integer value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ScriptRecord
     */
    public ScriptRecord() {
        super(Script.SCRIPT);
    }

    /**
     * Create a detached, initialised ScriptRecord
     */
    public ScriptRecord(Integer index, String value) {
        super(Script.SCRIPT);

        set(0, index);
        set(1, value);
    }
}
