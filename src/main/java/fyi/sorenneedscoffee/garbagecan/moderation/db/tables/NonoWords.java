/*
 * This file is generated by jOOQ.
 */
package fyi.sorenneedscoffee.garbagecan.moderation.db.tables;


import fyi.sorenneedscoffee.garbagecan.moderation.db.S4D0Users;
import fyi.sorenneedscoffee.garbagecan.moderation.db.tables.records.NonoWordsRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NonoWords extends TableImpl<NonoWordsRecord> {

    private static final long serialVersionUID = -185410091;

    /**
     * The reference instance of <code>s4_d0_users.nono_words</code>
     */
    public static final NonoWords NONO_WORDS = new NonoWords();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NonoWordsRecord> getRecordType() {
        return NonoWordsRecord.class;
    }

    /**
     * The column <code>s4_d0_users.nono_words.word</code>.
     */
    public final TableField<NonoWordsRecord, String> WORD = createField(DSL.name("word"), org.jooq.impl.SQLDataType.VARCHAR(800), this, "");

    /**
     * The column <code>s4_d0_users.nono_words.exceptions</code>.
     */
    public final TableField<NonoWordsRecord, String> EXCEPTIONS = createField(DSL.name("exceptions"), org.jooq.impl.SQLDataType.VARCHAR(800), this, "");

    /**
     * Create a <code>s4_d0_users.nono_words</code> table reference
     */
    public NonoWords() {
        this(DSL.name("nono_words"), null);
    }

    /**
     * Create an aliased <code>s4_d0_users.nono_words</code> table reference
     */
    public NonoWords(String alias) {
        this(DSL.name(alias), NONO_WORDS);
    }

    /**
     * Create an aliased <code>s4_d0_users.nono_words</code> table reference
     */
    public NonoWords(Name alias) {
        this(alias, NONO_WORDS);
    }

    private NonoWords(Name alias, Table<NonoWordsRecord> aliased) {
        this(alias, aliased, null);
    }

    private NonoWords(Name alias, Table<NonoWordsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> NonoWords(Table<O> child, ForeignKey<O, NonoWordsRecord> key) {
        super(child, key, NONO_WORDS);
    }

    @Override
    public Schema getSchema() {
        return S4D0Users.S4_D0_USERS;
    }

    @Override
    public NonoWords as(String alias) {
        return new NonoWords(DSL.name(alias), this);
    }

    @Override
    public NonoWords as(Name alias) {
        return new NonoWords(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NonoWords rename(String name) {
        return new NonoWords(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NonoWords rename(Name name) {
        return new NonoWords(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
