/*
 * This file is generated by jOOQ.
 */
package fyi.sorenneedscoffee.garbagecan.moderation.db.tables;


import fyi.sorenneedscoffee.garbagecan.moderation.db.Indexes;
import fyi.sorenneedscoffee.garbagecan.moderation.db.Keys;
import fyi.sorenneedscoffee.garbagecan.moderation.db.S4D0Users;
import fyi.sorenneedscoffee.garbagecan.moderation.db.tables.records.KickListRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KickList extends TableImpl<KickListRecord> {

    private static final long serialVersionUID = -8029623;

    /**
     * The reference instance of <code>s4_d0_users.kick_list</code>
     */
    public static final KickList KICK_LIST = new KickList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KickListRecord> getRecordType() {
        return KickListRecord.class;
    }

    /**
     * The column <code>s4_d0_users.kick_list.id</code>.
     */
    public final TableField<KickListRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(18).nullable(false), this, "");

    /**
     * Create a <code>s4_d0_users.kick_list</code> table reference
     */
    public KickList() {
        this(DSL.name("kick_list"), null);
    }

    /**
     * Create an aliased <code>s4_d0_users.kick_list</code> table reference
     */
    public KickList(String alias) {
        this(DSL.name(alias), KICK_LIST);
    }

    /**
     * Create an aliased <code>s4_d0_users.kick_list</code> table reference
     */
    public KickList(Name alias) {
        this(alias, KICK_LIST);
    }

    private KickList(Name alias, Table<KickListRecord> aliased) {
        this(alias, aliased, null);
    }

    private KickList(Name alias, Table<KickListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> KickList(Table<O> child, ForeignKey<O, KickListRecord> key) {
        super(child, key, KICK_LIST);
    }

    @Override
    public Schema getSchema() {
        return S4D0Users.S4_D0_USERS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.KICK_LIST_PRIMARY);
    }

    @Override
    public UniqueKey<KickListRecord> getPrimaryKey() {
        return Keys.KEY_KICK_LIST_PRIMARY;
    }

    @Override
    public List<UniqueKey<KickListRecord>> getKeys() {
        return Arrays.<UniqueKey<KickListRecord>>asList(Keys.KEY_KICK_LIST_PRIMARY);
    }

    @Override
    public KickList as(String alias) {
        return new KickList(DSL.name(alias), this);
    }

    @Override
    public KickList as(Name alias) {
        return new KickList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public KickList rename(String name) {
        return new KickList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KickList rename(Name name) {
        return new KickList(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
